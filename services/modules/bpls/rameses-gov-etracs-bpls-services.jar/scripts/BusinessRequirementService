import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class BusinessRequirementService  {

	@DataContext( dynamic=true )
	def dynaEm;

	@ActiveDB("business_requirement")
	def em;

	@Service("DateService")
	def dateSvc;

	@Service("BPRequirementRuleService")
	def ruleSvc;

	@ProxyMethod
	public void addRequirements( o ) {
		if ( !o.businessid ) throw new Exception("businessid is required");

		em.removeApplicationRequirements( o );
		em.removeNonApplicationRequirements( o );
		
		o.requirements?.each { a-> 
			a.objid = "BUSREQ" + new UID();
			a.businessid = o.businessid;
			a.applicationid = o.applicationid;
			if ( !a.completedby ) a.completedby = [:]; 

			if ( a.completed ) { 
				a.dtcompleted = dateSvc.serverDate; 
			} 
			em.create( a ); 
		} 
	} 

	@ProxyMethod
	public def getList(def o) {
		if(!o.businessid) throw new Exception("businessid is required");
		return em.getApplicationRequirements( o );
	}

	@ProxyMethod
	public def fetchRequirements(def o) {
		if ( !o.business?.objid ) throw new Exception("business objid is required");
		if ( !o.objid ) throw new Exception("application objid is required");

		def p = [:];
		p.businessid = o.business.objid; 
		p.applicationid = o.objid;

		def reftypes = em.getApplicationRequirements( p ).groupBy{ it.reftype } 
		em.removeApplicationRequirements( p );
		em.removeNonApplicationRequirements( p );

		def rlist = ruleSvc.execute( o )?.requirements;
		for ( z in rlist ) { 
			def v = reftypes[ z.reftype ];  
			if ( v ) {
				z = v.first(); 
			} else { 
				z.businessid = p.businessid; 
				z.applicationid = p.applicationid;
			} 
			z.objid = "BUSREQ"+new UID(); 
			em.create( z );				
		} 
		return em.getApplicationRequirements( p );
	}

	@ProxyMethod
	public def updateRequirement( param ) { 
		return em.update( param );	
	}

	@ProxyMethod
	public def removeRequirement( param ) {
		def em = dynaEm.lookup('business_requirement'); 
		def req = em.select('objid,completed,refno,reftype,title').find([ objid: param.objid.toString() ]).first();
		if ( !req ) {
			return [status: 'failed', message: 'record not found']; 
		} 

		if ( req.completed.toString() == '1' ) {
			return [status: 'failed', message: 'requirement has been marked as completed']; 
		}

		em.find([ objid: param.objid.toString() ]).delete(); 
		return [status: 'success']; 
	}

	@ProxyMethod
	public def getUnexpiredListForRenewal( param ) {
		def mm = [:]; 
		mm.appyear = param.appyear; 
		mm.businessid = param.business?.objid; 

		def list = em.getUnexpiredListForRenewal( mm ); 
		list.each{ 
			it.remove('objid'); 
			it.remove('applicationid'); 
			it.businessid = mm.businessid; 
		}
		return list; 
	} 
}